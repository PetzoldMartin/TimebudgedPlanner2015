import gcore;

extension org::genesez::metamodel::core::util::AccessElement;
extension org::genesez::metamodel::core::util::NavigateElement;
extension org::genesez::metamodel::core::util::CreateElement;
extension org::genesez::metamodel::core::util::CloneElement;

MModel transform(MModel this) :
	nestedPackage.transform() ->
	this;
	
MPackage transform(MPackage this) :
	nestedPackage.transform() ->
	classifier.typeSelect(MClass).transform() ->
	this;
	
MClass transform(MClass this) :
	emHasStereotypeAssignment("Material")
		? ( appendJPAQualifier(this,navModel()) )
		: this ->
		emHasStereotypeAssignment("Tool")
		? (appendEJBQualifier(this, navModel(), "false"))
		: this ->
		emHasStereotypeAssignment("Automat")
		? makeEJB3IterceptorBean(this , "true", navModel()) 
		: this
		->
		emHasStereotypeAssignment("Automat")
		? appendEJBQualifier(this, navModel(), "true") 
		: this
		 ->
		emHasStereotypeAssignment("AuditInterceptor")
		? (makeEJB3IterceptorImpl(this , "Audit", navModel()))
		: this;

MStereotype appendEJBQualifier(MClass class, MModel model, String isStateful) :
	let sType = createStereotype(model, "UID_ejb3SessionBean", "ejb3SessionBean") : 
	createTag(sType, "name", "String") ->
	class.createTaggedValue(createTag(sType, "stateful", "Boolean"), isStateful) ->
    class.createTaggedValue(createTag(sType, "entityManager", "ejb3EntityManagerType"), "EntityManager") ->
    class.createTaggedValue(createTag(sType, "entityManagerAccess", "ejb3EntityManagerAccessType"), "None") ->
    sType;

MStereotype appendJPAQualifier(MClass class, MModel model) :
	let sType = createStereotype(model,"UID_jpaPersistentEntity" ,"jpaPersistentEntity") : 
	createTag(sType, "name", "String") -> 
	class.createTaggedValue(createTag(sType, "optimisticLocking", "Boolean"), "true" ) ->
	createTag(sType, "tableName", "String") -> 
	createTag(sType, "tableCatalog", "String") ->
	createTag(sType, "tableSchema", "String") -> 
	sType;
	
MStereotype makeEJB3IterceptorBean(MClass container, String stateful, MModel model) :
    let s = createStereotype(model,"UID_ejb3OperationInterceptor", "ejb3OperationInterceptor"):
        createTag(s,"name","String") ->
        container.operation.createTaggedValue(createTag(s,"aroundInvoke","Boolean"),stateful) ->
        s; 

MStereotype makeEJB3IterceptorImpl(MClass container, String stateful, MModel model) :
    let s = createStereotype(model,"UID_ejb3OperationInterceptor", "ejb3OperationInterceptor"):
        createTag(s,"name","String") ->
        createTag(s,"interceptors", "AuditInterceptor")->
       	container.operation.createTaggedValue(createTag(s,"interceptors", "Boolean"),stateful) ->
       	s;